// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package repository

import (
	"context"
)

const getAllUser = `-- name: GetAllUser :many
SELECT id, username, firstname, activated, created_at FROM users
`

func (q *Queries) GetAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Activated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, activated
FROM users
WHERE id = $1
`

type GetUserRow struct {
	ID        int64
	Username  string
	Activated bool
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Username, &i.Activated)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (username, firstname, activated)
VALUES ($1, $2, $3)
RETURNING id, username, firstname, activated, created_at
`

type InsertUserParams struct {
	Username  string
	Firstname *string
	Activated bool
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Username, arg.Firstname, arg.Activated)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Activated,
		&i.CreatedAt,
	)
	return i, err
}
